Index: de/ueberdosis/mp3info/Defines.java
===================================================================
RCS file: /cvsroot/mp3info/id3/de/ueberdosis/mp3info/Defines.java,v
retrieving revision 1.8
diff -u -r1.8 Defines.java
--- de/ueberdosis/mp3info/Defines.java	18 Dec 2002 09:13:38 -0000	1.8
+++ de/ueberdosis/mp3info/Defines.java	30 Apr 2004 00:18:39 -0000
@@ -38,7 +38,7 @@
 			  25000 };
 
     /** The encoding used if not set otherwise */
-    public static final String DEFAULT_ENCODING = "ISO-8859-1";
+    public static final String DEFAULT_ENCODING = System.getProperty("id3.default_encoding", "ISO-8859-1");
 
     /** Version number of the current release */
     public static final String VERSION = "mp3info V1.6.0d6";
Index: de/ueberdosis/mp3info/ID3Reader.java
===================================================================
RCS file: /cvsroot/mp3info/id3/de/ueberdosis/mp3info/ID3Reader.java,v
retrieving revision 1.24
diff -u -r1.24 ID3Reader.java
--- de/ueberdosis/mp3info/ID3Reader.java	24 Oct 2003 12:46:29 -0000	1.24
+++ de/ueberdosis/mp3info/ID3Reader.java	30 Apr 2004 00:18:40 -0000
@@ -469,13 +469,26 @@
 	// OutputCtr.println ("findNextHeader ( .. , "+startPosition+");");
 	long currentPosition = startPosition;
 
-	byte [] frameHeader;
+	byte [] frameHeader = new byte[ID3V2_HEADER_SIZE];
 	boolean good = false;
+	int BUFFER_SIZE = 64 * 1024;
+	byte[] buf = new byte[BUFFER_SIZE];
+	long bufStart = -BUFFER_SIZE;
+	long len = raf.length();
 
 	// we keep looking as long as we still have 10 bytes left 
 	// (remember, sizeof (id3v2 frameheader) = 10
-	while (currentPosition < raf.length () - 10 && !good) {
-	    frameHeader = getFrameHeader (currentPosition, raf);
+	while (currentPosition < len - 10 && !good) {
+	    // buffer the file to speed up reading
+	    if (bufStart + BUFFER_SIZE <= currentPosition + ID3V2_HEADER_SIZE) try {
+	    	bufStart = currentPosition;
+	    	raf.seek(bufStart);
+	    	raf.read(buf);
+	    } catch (IOException e) {
+	    	e.printStackTrace();
+	    }
+	    System.arraycopy(buf, (int)(currentPosition-bufStart), frameHeader, 0, ID3V2_HEADER_SIZE);
+//	    frameHeader = getFrameHeader (currentPosition, raf);
 	    good = checkFrameHeader (frameHeader, currentPosition);
 	    if (!good) currentPosition++;
 	    // OutputCtr.println (currentPosition);
Index: de/ueberdosis/mp3info/id3v2/FrameT.java
===================================================================
RCS file: /cvsroot/mp3info/id3/de/ueberdosis/mp3info/id3v2/FrameT.java,v
retrieving revision 1.2
diff -u -r1.2 FrameT.java
--- de/ueberdosis/mp3info/id3v2/FrameT.java	22 Oct 2003 23:51:02 -0000	1.2
+++ de/ueberdosis/mp3info/id3v2/FrameT.java	30 Apr 2004 00:18:40 -0000
@@ -45,10 +45,31 @@
 	// Decoding our information from the DataSource!
 	try {
 	    encoding = ds.getByte ();
-	    byte [] bAr = ds.getBytesTo ((byte)0);
+	    byte [] bAr = ds.getBytes (ds.getBytesLeft()); // instead of reading to 0, because unicode strings can contain zeros
+	    // hack for texts not started with encoding byte (2.3 allows this)
+	    if (encoding > 3) {
+	    	byte[] newb = new byte[bAr.length+1];
+	    	newb[0] = encoding;
+	    	System.arraycopy(bAr, 0, newb, 1, bAr.length);
+	    	bAr = newb;
+	    }
 	    if (bAr != null) {
-		try { text = new String (bAr, DEFAULT_ENCODING); }
-		catch (UnsupportedEncodingException ex) {
+		try { 
+			String enc = DEFAULT_ENCODING;
+			switch (encoding) {
+				case 1:
+					enc = "UTF-16";
+					break;
+				case 2:
+					enc = "UnicodeBigUnmarked";
+					break;
+				case 3:
+					enc = "UTF8";
+					break;
+			}
+			text = new String (bAr, enc); 
+			text = text.trim();
+		} catch (UnsupportedEncodingException ex) {
 		    text = new String (bAr);
 		}
 	    }
